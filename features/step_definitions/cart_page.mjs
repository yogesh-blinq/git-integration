import { Given, When, Then, After, setDefaultTimeout, Before } from "@dev-blinq/cucumber-js";
import { closeContext, initContext, navigate } from "automation_model";
setDefaultTimeout(60 * 1000);

const path = null;

const elements = {
  button_add_product: {
    locators: [
      { css: 'li >> internal:has-text="KeyX 3000 - Mechanical"i >> internal:label="add-product"i', priority: 1 },
      { css: 'internal:text="KeyX 3000 - Mechanical Keyboard1$"i >> internal:label="add-product"i', priority: 2 },
      { css: 'internal:text="KeyX 3000 - Mechanical Keyboard1$"i >> internal:label="add-product"s', priority: 2 },
      {
        css: 'internal:text="KeyX 3000 - Mechanical Keyboard1$"i >> internal:role=button[name="add-product"i]',
        priority: 2,
      },
      {
        css: 'internal:text="KeyX 3000 - Mechanical Keyboard1$"i >> internal:role=button[name="add-product"s]',
        priority: 2,
      },
    ],
    element_name: "add-product button",
  },
  button_add_product_1: {
    locators: [
      {
        css: 'li >> internal:has-text="Mizu Bottle - Durable Hot & Cold1$"i >> internal:label="add-product"i',
        priority: 1,
      },
      { css: 'internal:text="Mizu Bottle - Durable Hot & Cold1$"i >> internal:label="add-product"i', priority: 2 },
      { css: 'internal:text="Mizu Bottle - Durable Hot & Cold1$"i >> internal:label="add-product"s', priority: 2 },
      {
        css: 'internal:text="Mizu Bottle - Durable Hot & Cold1$"i >> internal:role=button[name="add-product"i]',
        priority: 2,
      },
      {
        css: 'internal:text="Mizu Bottle - Durable Hot & Cold1$"i >> internal:role=button[name="add-product"s]',
        priority: 2,
      },
    ],
    element_name: "add-product button",
  },
  button_checkout: {
    locators: [
      { css: 'internal:role=button[name="Checkout"i]', priority: 1 },
      { css: 'internal:role=button[name="Checkout"s]', priority: 1 },
      { css: 'internal:text="Checkout"i', priority: 1 },
      { css: 'internal:text="Checkout"s', priority: 1 },
      { css: 'button >> internal:has-text="Checkout"i', priority: 1 },
    ],
    element_name: "Checkout button",
  },
  button_checkout_1: {
    locators: [
      { css: 'internal:role=button[name="Continue"i]', priority: 1 },
      { css: 'internal:text="Continue"i', priority: 1 },
      { css: 'internal:text="Continue"s', priority: 1 },
      { css: 'button >> internal:has-text="Continue"i', priority: 1 },
    ],
    element_name: "Checkout button",
  },
  button_checkout_2: {
    locators: [
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CHECKOUT"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CHECKOUT"s]' },
      { strategy: "ID", css: "#root > div > div > div.MuiBox-root.css-5fhkjp > div > div > button", priority: 3 },
    ],
    element_name: "CHECKOUT",
  },
  textbox_first_name: {
    locators: [
      { role: ["textbox", { name: "First name *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="First name"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="First name"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r2\\:", priority: 3, autogenerated: true },
    ],
    element_name: "First name",
  },
  textbox_last_name: {
    locators: [
      { role: ["textbox", { name: "Last name *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Last name"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Last name"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r3\\:", priority: 3, autogenerated: true },
    ],
    element_name: "Last name",
  },
  textbox_zip_postal_code: {
    locators: [
      { role: ["textbox", { name: "Zip/Postal code *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Zip/Postal code"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Zip/Postal code"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r4\\:", priority: 3, autogenerated: true },
    ],
    element_name: "Zip/Postal code",
  },
  button_continue: {
    locators: [
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CONTINUE"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CONTINUE"s]' },
      { strategy: "ID", css: "#root > div > div > div.MuiBox-root.css-5fhkjp > div > div > button", priority: 3 },
    ],
    element_name: "CONTINUE",
  },
};

let context = null;
Before(async function () {
  if (!context) {
    context = await initContext(path, false, false, this);
  }
  await navigate(path);
});
After(async function () {
  await closeContext();
  context = null;
});
/**
 * The user adds products to the cart and proceeds to checkout
 * @recorder
 * @path=/cart
 */
async function the_user_adds_products_to_the_cart_and_proceeds_to_checkout() {
  // source: recorder
  // implemented_at: 2025-04-03T09:56:23.405Z
  const _params = {};
  // Click on add-product button
  await context.stable.click(elements["button_add_product"], _params, null, this);
  // Click on add-product button
  await context.stable.click(elements["button_add_product_1"], _params, null, this);
  // Click on Checkout button
  await context.stable.click(elements["button_checkout"], _params, null, this);
  // Click on Checkout button
  await context.stable.click(elements["button_checkout_1"], _params, null, this);
}

When(
  "The user adds products to the cart and proceeds to checkout",
  { timeout: 240000 },
  the_user_adds_products_to_the_cart_and_proceeds_to_checkout
);

/**
 * checkout with first name "guy", last name "arieli", zip "100102"
 * @param {string} _first_name  first name
 * @param {string} _last_name  last name
 * @param {string} _zip_code  zip code
 * @ai
 */
async function checkout_with_first_name_first_name_last_name_last_name_zip_zip_code(
  _first_name,
  _last_name,
  _zip_code
) {
  // source: ai
  // implemented_at: 2025-04-03T10:45:33.457Z
  const _params = { _first_name, _last_name, _zip_code };
  // Click on CHECKOUT
  await context.stable.click(elements["button_checkout_2"], _params, null, this);
  // Fill First name with "_first_name"
  await context.stable.clickType(elements["textbox_first_name"], _first_name, false, _params, null, this);
  // Fill Last name with "_last_name"
  await context.stable.clickType(elements["textbox_last_name"], _last_name, false, _params, null, this);
  // Fill Zip/Postal code with "_zip_code"
  await context.stable.clickType(elements["textbox_zip_postal_code"], _zip_code, false, _params, null, this);
  // Click on CONTINUE
  await context.stable.click(elements["button_continue"], _params, null, this);
}

When(
  "checkout with first name {string}, last name {string}, zip {string}",
  { timeout: 360000 },
  checkout_with_first_name_first_name_last_name_last_name_zip_zip_code
);

/**
 * verify "Thank you for your order" can be found in the page
 * @param {string} _thank_you_message  thank you message
 * @ai
 */
async function verify_thank_you_message_can_be_found_in_the_page(_thank_you_message) {
  // source: ai
  // implemented_at: 2025-04-03T10:45:33.487Z
  const _params = { _thank_you_message };
  // Verify page contains text "_thank_you_message"
  await context.stable.verifyTextExistInPage(_thank_you_message, null, this);
}

Then(
  "verify {string} can be found in the page",
  { timeout: 120000 },
  verify_thank_you_message_can_be_found_in_the_page
);
